[project]
name = "inbox-client"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "prometheus-client>=0.21.1",
    "python-dotenv>=1.1.0",
]

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
    "coverage[toml]",
]
dev = [
    "inbox-client[test]",
    "ruff",
    "mypy",
    "hatch",
    "pytest",
    "mypy",
    "git-filter-repo"
]


# --- HATCH --- TODO: FIX
[tool.hatch.envs.test]
dependencies = [
    "inbox-client[test]", 
    "pytest",
    "pytest-cov",
    "coverage[toml]",
]

[tool.hatch.envs.test.scripts]
# Example script definition
cov = "pytest --cov=src --cov-report=term-missing {args:.}"
no-cov = "pytest {args:.}"
# Default script when running 'hatch run test' or 'hatch test'
_ = "cov"
# --- HATCH ---


# --- BUILDING ---
# No build system needed
# !!Root is Not a Buildable Python Package!!
# --- BUILDING ---


# --- RUFF ---
[tool.ruff]
line-length = 100  # Default formatting width
target-version = "py311"  # Adjust based on actual Python version

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "INP001",  # Ignore missing __init__.py for namespace packages
    "D100",  # Ignore missing module-level docstrings
    "D203", "D211",  # Conflicting rules about blank lines before class
    "D212", "D213",  # Conflicting rules about multi-line docstrings
    "S101",  # Ignore assert usage in tests
    "T201",  # Ignore print statements in Logger component
    "COM812",  # Suggested by ruff to disable it to avoid unexpected behavior
    "PIE790", # Ignore unnecessary pass statement in interfaces
    "ANN401", # Ignore dynamically typed expression are disallowed in interfaces
    "F401", # Module imported but unused
    "F823", # Local variable name shadows a built-in name
    "PLR2004", # Too many branches
    "ERA001", # File is not encoded with UTF-8
    "F841", # Local variable assigned but not used
    "F821", # Undefined name
    "PGH003", # Use specific rule codes when ignoring type issues
    "I001", # Import block is un-sorted or un-formatted
    "N806", # We use camelCase
    "BLE001", # Blind exceptions are needed when working with google api
    "TRY300", # Else blocks not applicable in api 
    "PTH123", # Open is safe in our case
    "G004", # f-strings are used in main.py only and are fine there
    "LOG015", # logs are valid on root
    "PTH110", # We use old-school paths
    "PTH107", # We use old-school paths
]


[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "ANN001", "ANN201"]
# --- RUFF ---



# --- WORKSPACE ---
[tool.uv.workspace]
members = [
    "src/inbox_client_protocol",
    "src/inbox_client_impl",
    "src/message",
    "src/message_impl",
    "src/ai_conversation_client",
]
# --- WORKSPACE ---



# --- PYTEST ---
[tool.pytest.ini_options]
pythonpath = [
    ".",
    "src",
    "tests/integration/",
    "tests/e2e"
    ]
testpaths = ["tests", "src"] # Include src/*/*/tests directories
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
# --- PYTEST ---



# --- MYPY ---
[tool.mypy]
strict = true
explicit_package_bases = true
mypy_path = [
    "src/inbox_client_protocol/src",
    "src/inbox_client_impl/src",
    "src/message/src",
    "src/message_impl/src",
    "src/ai_conversation_client",

]
# --- MYPY ---



# --- COVERAGE ---

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",             # Exclude all files in the top-level tests/ directory
    "src/*/tests/*",       # Exclude all files in any src/<package>/tests/ directory
    ".venv/*",             # Standard practice: exclude virtual environment
    "*/__main__.py",       # Exclude main entry points if any
    "**/test_*.py",
    "src/ai_conversation_client/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",          # Standard pragma
    "raise NotImplementedError", # Protocol/Abstract methods
    "if TYPE_CHECKING:",         # Type checking blocks
    "Protocol",                  # Lines defining Protocols
    "@abstractmethod",           # Abstract methods decorators
    "# type: ignore",            # Lines with type ignores
    "except Exception as e:",    # Optionally ignore basic exception handlers
    'if __name__ == "__main__":', # Main execution block
    # Add any other specific line patterns if needed
]

[dependency-groups]
dev = [
    "python-dotenv>=1.1.0",
]
# --- COVERAGE ---