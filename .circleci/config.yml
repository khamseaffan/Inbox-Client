# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define jobs to be invoked later in a workflow.
jobs:
  # Job 1: Setup Environment and Install All Dependencies
  build:
    docker:
      - image: cimg/python:3.11 # Use a consistent Python version
    steps:
      - checkout
      - run:
          name: "Install UV and Add to Path"
          command: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV
            uv --version # Verify installation
      - run:
          name: "Create Virtual Env & Install All Dependencies via UV Sync"
          command: |
            # Create venv in the default .venv location
            uv venv --python 3.11
            source .venv/bin/activate
            # Install all dependencies including dev/test extras
            uv sync --all-packages --extra test --extra dev --verbose
      - run:
          name: "Verify Installation (Optional)"
          command: |
            source .venv/bin/activate
            uv pip list # Check if workspace members and tools are listed
            ruff --version
            pytest --version
            mypy --version
            coverage --version
      - persist_to_workspace:
          # Persist the entire project directory, including the populated .venv
          root: .
          paths:
            - .

  # Job 2: Linting and Formatting Checks
  lint:
    docker:
      - image: cimg/python:3.11
    steps:
      - attach_workspace:
          at: . # Attach the workspace persisted from 'build'
      - run:
          name: "Run Linting and Formatting Checks"
          command: |
            source .venv/bin/activate # Activate the venv from the workspace
            ruff check .

  # Job 3: Unit Tests, Static Analysis, and Coverage
  unit_test:
    docker:
      - image: cimg/python:3.11
    steps:
      - attach_workspace:
          at: . # Attach the workspace persisted from 'build'
      - run:
          name: "Activate Venv and Create Test Results Directory"
          command: |
            source .venv/bin/activate
            mkdir -p test-results/unit # Create directory for JUnit XML
      - run:
          name: "Execute Unit Test Suite (pytest + coverage)"
          command: |
            source .venv/bin/activate
            # Run pytest, collecting coverage, excluding integration tests
            # Ensure mocks are used for external calls in these tests
            pytest . --cov=src --cov-report=xml --cov-report=term \
                     -m "not integration" \
                     --junitxml=test-results/unit/junit.xml
      - run:
          name: "Run Static Analysis (mypy)"
          command: |
            source .venv/bin/activate
            # Target specific source and test directories for mypy
            uv pip install types-requests
            mypy src tests --explicit-package-bases
      - run:
          name: "Enforce Coverage Threshold and Generate Reports"
          command: |
            source .venv/bin/activate
            # Use coverage CLI now that pytest has run it
            coverage report --fail-under=70
            coverage json -o test-results/unit/coverage.json # Generate JSON report
      - store_test_results:
          path: test-results/unit
      - store_artifacts: # Store coverage reports
          path: coverage.xml
      - store_artifacts:
          path: test-results/unit/coverage.json

  # Job 4: Integration Tests (Requires Secrets)
  integration_test:
    docker:
      - image: cimg/python:3.11
    # Environment variables from the 'inboxclient' context will be available here
    steps:
      - attach_workspace:
          at: . # Attach the workspace persisted from 'build'
      - run:
          name: "Activate Venv and Create Test Results Directory"
          command: |
            source .venv/bin/activate
            mkdir -p test-results/integration # Separate directory for results
      - run:
          name: "Execute Integration Test Suite (pytest)"
          command: |
            source .venv/bin/activate
            # Run only tests marked as 'integration'
            # These tests will use the environment variables from the context
            pytest . -m integration --junitxml=test-results/integration/junit.xml
      - store_test_results:
          path: test-results/integration

  # Job 5: Report Summary
  report_summary:
    docker:
      - image: cimg/base:stable # Use a basic image for reporting
    steps:
      - attach_workspace:
          at: . # Attach the workspace
      - run:
          name: "Summarize Unit Test Results"
          command: |
            echo "--- Unit Test Summary ---"
            if [ -f test-results/unit/junit.xml ]; then
              echo "Unit test results file found."
            else
              echo "Unit test results file (test-results/unit/junit.xml) not found."
            fi
      - run:
          name: "Summarize Integration Test Results"
          command: |
            echo "--- Integration Test Summary ---"
            if [ -f test-results/integration/junit.xml ]; then
              echo "Integration test results file found."
            else
              echo "Integration test results file (test-results/integration/junit.xml) not found."
            fi
      - run:
          name: "Display Coverage Info (from artifact)"
          command: |
            echo "--- Coverage Summary (from coverage.xml) ---"
            if [ -f coverage.xml ]; then
               echo "Coverage XML found. Check artifacts for details."
               # Example: Extract overall line rate
               grep -o 'line-rate="[^"]*"' coverage.xml | head -n 1 || echo "Could not parse line-rate."
            else
               echo "Coverage XML not found."
            fi

# Orchestrate jobs using workflows
workflows:
  build_lint_test_integrate:
    jobs:
      - build

      - lint:
          requires:
            - build

      - unit_test:
          requires:
            - build

      - integration_test:
          requires:
            - unit_test # Run after unit tests pass
          context: inboxclient
                
      # Optional: Report summary after tests
      - report_summary:
          requires:
            # Run after both test types (adjust if integration tests aren't always run)
            - unit_test
            - integration_test # Make reporting depend on integration tests if they run
          # Only run reporting on the main branch if integration tests only run there
          filters:
            branches:
              only:
                - main
